---
title: "Go语言学习笔记1"
layout: post
date: 2023-12-29 18:56
# image: /assets/images/markdown.jpg
headerImage: false
tag:
- 杂记
# star: true
# hidden: true
category: blog
author: focalism
description: Go语言学习笔记1
---

##### init函数和main函数

- `init` 函数特征

  1.`init`函数是用于程序执行前做包的初始化函数，比如初始化包里面的变量

  2.每个包可以拥有多个`init`函数

  3.包的每个源文件也可以拥有多个`init`函数

  4.同一个包中多个`init`函数的执行顺序`go`语言没有明确的定义（说明）

  5.不同包的`init`函数按照包导入的依赖关系决定该初始化函数的执行顺序

  6.`init`函数不能被其它函数调用，而是在main函数执行之前，自动被调用

- `main`函数

  1，`go`语言程序的默认入口函数（主函数）：`fun main()`

- `init`函数与`main`函数的异同

  - 相同点：两个函数在定义时不能有任何参数和返回值，且Go程序自动调用
  - 不同点：
    - `init`可以应用任意包中，且可以重复定义多个
    - `main`函数只能用于main包中，且只能定义一个

- `init`和`main`执行顺序

  1.对于同一个`go`文件的`init()`调用顺序时从上到下的

  2.对于同一个`package`中不同文件是按照文件名字符串比较“从大到小”顺序调用各文件中的`init()`函数

  3.对于不同`package`，如果不相互依赖的话，按照`main`包中“先`import`的后调用”的顺序调用其包中的`init()`,如果`package`存在依赖，则先调用最早被依赖的`package`的`package`中的`init()`,最后调用`main`函数

  4.如果`init`函数中使用`println`或者`print`你会发现在执行过程中这两个不会按照你象限中的顺序执行



##### 下划线的特殊用法

- `import _ 包路径`: 当导入一个包时，该包下的所有init函数都会被执行，然而，有时候我们并不需要把整个包都导入进来，仅仅时希望执行init函数而已，这个时候可以使用import引用该包。即使用【import _ 包路径】只是引用该包，仅仅时为了调用init()函数，所以无法通过包名来调用包中的其它函数
- `f, _ := os.Open("/Users/***/Desktop/text.txt")`： 下划线意思是忽略这个变量.



##### 变量申明

-  var 变量名 变量类型
- 类型推导 `var sex=1`
- 短变量声明：`n:=10`
- 匿名变量: `x, _ := foo()`



##### Array 和Slice区别

- Array：一旦声明就长度固定了，

- Slice：动态长度的数组，有三个属性：指针，长度和容量。指针指向数组中第一个可以由Slice访问的元素，长度指当前slice中元素个数，容量指能包含的最大元素数量，当容量不足时，会自动扩充为原来的两倍

- 初始化

  ```
  // array初始化
  1.var arr [5]int
  2.arr := [5]int{1}
  3.arr:= [...]int{1,2,3}
  4.arr:= [...]int{4:1}
  
  // slice初始化
  s := int{1,2,3}   //值为[1,2,3] ,长度和容量为3
  
  arr := [5]int{1,2,3,4,5}
  s := arr[0:3]    //值为[1,2,3],长度为3， 容量为5
  s := make([]int, 3) // 值为[0,0,0],长度和容量为3
  s := make([]int, 3, 5) //值为[0,0,0]，长度为3，容量为5
  
  ```

- 函数参数

  1.`array`作为函数参数时，必须指定参数数组的大小，且传入的数组大小必须与指定的大小一致，数组为按值传递，函数内对数组的值的改变不影响初始数组

  2.`slice`作为函数参数传递时为按引用传递，函数内对slice内元素的修改将导致函数外的值也发生改变，不过由于传入函数的是一个指针的副本，所有对该指针的修改不会导致原来指针的变化（例如append函数不会改变原来slice的值）

- example1

  ```go
  package main
  
  import "fmt"
  
  func PrintSlice(s []int){
  	s = append(s, 4)
  	fmt.Printf("%p\n" ,&s)
  	s[0] = -1
  	fmt.Println(s)
  }
  func main() {
  	s := []int{1,2,3,4,5}
  	s1 := s[0:3]
  	fmt.Println("s:", s)
  	fmt.Println("s1:", s1)
  	PrintSlice(s1)
  	fmt.Println("s:", s)
  	fmt.Println("s1:",s1)
  	fmt.Printf("%p\n" ,&s1)
  }
  
  // 输出：
  // s out: [1 2 3 4 5]
  // s1 out: [1 2 3]
  // s1 in: [-1 2 3]
  // s1 in:0xc0000040c0
  // s out: [-1 2 3 4 5]
  // s1 out: [-1 2 3]
  // s1 out:0xc000004078
  
  /* 将slice 作为参数，在函数内部修改slice的值会导致 函数外slice的值发生变化，
  在外部s1指向s的第一个元素1，长度为3，容量为5，在函数内部，执行s = append(s,4)，
  会向s指向的数组追加一个一个元素，此时s并没有发生变化，仅仅是底层数组变了，
  并返回新的切片，赋值给s，此时函数内和函数外的指针都指向数组的第一个元素，在函数
  内执行s[0] = -1,会修改数组第一个元素的值为-1 */
  ```

  

- example2:

  ```go
  package main
  
  import "fmt"
  
  func PrintSlice(s []int){
  	s = append(s, 1)
  	fmt.Printf("s1[0] in:%p\n" ,&s[0])
  	s[0] = -1
  	fmt.Println("s1 in:", s)
  }
  func main() {
  	s := []int{1,2,3,4,5}
  	s1 := s[0:3]
  	PrintSlice(s1)
  	fmt.Println("s1 out:",s1)
  	fmt.Printf("s1[0] out:%p\n" ,&s1[0])
  }
  
  /* 输出
  s1[0] in:0xc00000a4e0
  s1 in: [-1 2 3 1]
  s1 out: [-1 2 3]
  s1[0] out:0xc00000a4e0 */
  
  // 将s = append(s, 1) 改成s = append(s, 1,2)
  /* 输出
  s1[0] in:0xc00000a4e0
  s1 in: [-1 2 3 1 2]
  s1 out: [-1 2 3]
  s1[0] out:0xc00000a4e0 */
  
  
  // 将s = append(s, 1) 改成s = append(s, 1,2,3)
  /* 输出
  s1[0] in:0xc0000103c0
  s1 in: [-1 2 3 1 2 3]
  s1 out: [1 2 3]
  s1[0] out:0xc00000a4e0 */
  
  /* 可以看到随着append元素的增加，函数内和函数外slice 值从第一个指向一样，
  变成第一个指向值不一样，这是因为当append导致，元素数量超出数组的长度时，
  go会自动创建一个新的数组，而新生成slice 执行的数组也变成新的，
  从而导致函数内外指向的数组不一样，因此在函数内改变slice的值，
  不会影响函数外的值 */
  
  ```

  

